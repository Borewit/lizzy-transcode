plugins {
    id 'application'
    id 'checkstyle'
}

apply plugin: 'maven-publish'

repositories {
    // Access the Central Repository with Gradle via HTTPS
    // Ref: https://central.sonatype.org/consume/consume-gradle/
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenLocal()
}

application {
    mainClassName = 'io.github.borewit.lizzy.Transcode'
}

dependencies {

    implementation 'args4j:args4j:2.33'

    // Provides christophedelory.playlist.*
    implementation 'io.github.borewit:lizzy:2.0.0'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    // JUnit Jupiter using Gradle's native JUnit Platform
    testImplementation platform('org.junit:junit-bom:5.9.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-params'
    testRuntimeOnly 'org.junit.platform:junit-platform-reporting'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

java {
    withSourcesJar()
    withJavadocJar()
}

group = 'io.github.borewit'
version = '1.0.0-SNAPSHOT'
description = 'Lizzy Transcode'
java.sourceCompatibility = JavaVersion.VERSION_1_8


task checkStyle(type: DefaultTask, dependsOn: [checkstyleMain, checkstyleTest]) {
    group = 'verification'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}


task checkJavaSources(type: SourceTask) {
    source 'src/main/java'
}

// Prevent generated Java sources are checked
tasks.checkstyleMain.source = fileTree(dir: 'src/main/java').include('**/*.java')

